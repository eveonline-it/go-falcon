#!/bin/bash

# Script to show available API routes in the Go Falcon gateway

echo "=== Go Falcon API Routes ==="
echo ""

echo "üîê Authentication Routes (via /auth):"
echo "  GET  /auth/eve/login         - Initiate EVE SSO login"
echo "  GET  /auth/eve/callback      - OAuth2 callback handler"
echo "  GET  /auth/eve/verify        - Verify JWT token"
echo "  POST /auth/eve/refresh       - Refresh access tokens"
echo "  POST /auth/eve/token         - Exchange EVE token for JWT (mobile)"
echo "  GET  /auth/status            - Quick auth status check"
echo "  GET  /auth/user              - Get current user info"
echo "  POST /auth/logout            - Clear auth cookie"
echo "  GET  /auth/profile           - Get full user profile (requires auth)"
echo "  POST /auth/profile/refresh   - Refresh profile from ESI (requires auth)"
echo "  GET  /auth/profile/public    - Get public profile by ID"
echo ""

echo "üë• Groups Routes (via /groups):"
echo "  GET  /groups                 - List all groups with membership status"
echo "  POST /groups                 - Create a new custom group (admin only)"
echo "  PUT  /groups/{id}            - Update an existing group (admin only)"
echo "  DELETE /groups/{id}          - Delete a custom group (admin only)"
echo ""

echo "üë§ Group Membership Routes:"
echo "  GET  /groups/{id}/members    - List all members of a group (admin only)"
echo "  POST /groups/{id}/members    - Add a member to a group (admin only)"
echo "  DELETE /groups/{id}/members/{characterID} - Remove member (admin only)"
echo ""

echo "üõ°Ô∏è Permission Routes:"
echo "  GET  /permissions/check?resource={resource}&action={action} - Check permission"
echo "  GET  /permissions/user       - Get user's complete permission matrix"
echo ""

echo "‚öôÔ∏è Development Routes (via /dev):"
echo "  GET  /dev/health             - Development module health check"
echo "  GET  /dev/sde/*              - SDE data access endpoints"
echo "  GET  /dev/esi/*              - ESI testing endpoints"
echo ""

echo "üë• Users Routes (via /users):"
echo "  GET  /users/health           - Users module health check"
echo ""

echo "üì¨ Notifications Routes (via /notifications):"
echo "  GET  /notifications/health   - Notifications module health check"
echo ""

echo "‚è∞ Scheduler Routes (via /scheduler):"
echo "  GET  /scheduler/health       - Scheduler module health check"
echo "  GET  /scheduler/tasks        - List all scheduled tasks (requires auth)"
echo "  POST /scheduler/tasks        - Create new task (admin only)"
echo "  GET  /scheduler/stats        - Get scheduler statistics (admin only)"
echo ""

echo "üè• System Routes:"
echo "  GET  /health                     - Gateway health check with version info"
echo ""

echo "=== Default Groups Available ==="
echo ""
echo "üîì guest         - Unauthenticated users (public read access)"
echo "üîê full          - Authenticated EVE users (standard permissions)"
echo "üè¢ corporate     - Corporation/alliance members (enhanced access)"
echo "üë®‚Äçüíº administrators - System administrators (management privileges)"
echo "‚ö° super_admin    - Ultimate authority (wildcard permissions)"
echo ""

echo "=== Permission Resources ==="
echo ""
echo "üåê public        - Public resources"
echo "üë§ user          - User-specific resources"
echo "üìù profile       - User profile data"
echo "üè¢ corporation   - Corporation-specific resources"
echo "ü§ù alliance      - Alliance-specific resources"
echo "üë• groups        - Group management"
echo "üîß system        - System administration"
echo "üõ†Ô∏è admin         - Administrative functions"
echo ""

echo "=== Permission Actions ==="
echo ""
echo "üìñ read          - View/retrieve data"
echo "‚úèÔ∏è write         - Modify/create data"
echo "üóëÔ∏è delete        - Remove data"
echo "‚öôÔ∏è admin         - Administrative control"
echo "‚≠ê *             - Wildcard (all actions)"
echo ""

echo "=== Example Usage ==="
echo ""
echo "# Check if user can write to user resources:"
echo "GET /permissions/check?resource=user&action=write"
echo ""
echo "# Get all available groups:"
echo "GET /groups"
echo ""
echo "# Create a new group (admin only):"
echo "POST /groups"
echo "Content-Type: application/json"
echo "Authorization: Bearer <jwt_token>"
echo '{"name": "beta-testers", "description": "Beta testing group", "permissions": {"user": ["read", "write"]}}'
echo ""

echo "=== Authentication Examples ==="
echo ""
echo "# Web Authentication Flow:"
echo "1. GET  /auth/eve/login      - Get EVE SSO URL"
echo "2. [User authenticates with EVE Online]"
echo "3. GET  /auth/eve/callback   - Process callback (sets cookie)"
echo "4. GET  /auth/user           - Get user info from cookie"
echo ""
echo "# Mobile Authentication Flow:"
echo "1. [App handles EVE SSO directly]"
echo "2. POST /auth/eve/token      - Exchange EVE token for JWT"
echo "3. Use 'Authorization: Bearer <jwt>' header for API calls"
echo ""

echo "=== Configuration Environment Variables ==="
echo ""
echo "# Required for EVE SSO:"
echo "EVE_CLIENT_ID=your_client_id"
echo "EVE_CLIENT_SECRET=your_client_secret"
echo "JWT_SECRET=your_jwt_secret"
echo ""
echo "# Optional:"
echo "API_PREFIX=api                   # API prefix (default: 'api')"
echo "SUPER_ADMIN_CHARACTER_ID=123456789  # Super admin character ID"
echo "GROUPS_CACHE_TTL=300            # Permission cache TTL (default: 300)"
echo "ENABLED_CORPORATION_IDS=123,456,789  # Enabled corp IDs for corporate group"
echo "ENABLED_ALLIANCE_IDS=123,456     # Enabled alliance IDs for corporate group"
echo ""

echo "=== Ready to Use! ==="
echo ""
echo "The groups module is now fully integrated and ready for use."
echo "Check the comprehensive documentation in internal/groups/README.md"
echo "for detailed API references and integration examples."